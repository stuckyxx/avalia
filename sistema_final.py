import streamlit as st
import json
import os
from datetime import datetime, timedelta
import docx
from docx.shared import Pt, RGBColor, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.section import WD_ORIENT
from docx2pdf import convert
import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader

# --- LISTA DE MUNIC√çPIOS ---
MUNICIPIOS_MARANHAO = [
    "A√ßail√¢ndia", "Afonso Cunha", "√Ågua Doce do Maranh√£o", "Alc√¢ntara", "Aldeias Altas", 
    "Altamira do Maranh√£o", "Alto Alegre do Maranh√£o", "Alto Alegre do Pindar√©", "Alto Parna√≠ba", 
    "Amap√° do Maranh√£o", "Amarante do Maranh√£o", "Anajatuba", "Anapurus", "Apicum-A√ßu", 
    "Araguan√£", "Araioses", "Arame", "Arari", "Axix√°", "Bacabal", "Bacabeira", "Bacuri", 
    "Bacurituba", "Balsas", "Bar√£o de Graja√∫", "Barra do Corda", "Barreirinhas", 
    "Bela Vista do Maranh√£o", "Bel√°gua", "Benedito Leite", "Bequim√£o", "Bernardo do Mearim", 
    "Boa Vista do Gurupi", "Bom Jardim", "Bom Jesus das Selvas", "Bom Lugar", "Brejo", 
    "Brejo de Areia", "Buriti", "Buriti Bravo", "Buriticupu", "Buritirana", "Cachoeira Grande", 
    "Cajapi√≥", "Cajari", "Campestre do Maranh√£o", "C√¢ndido Mendes", "Cantanhede", 
    "Capinzal do Norte", "Carolina", "Carutapera", "Caxias", "Cedral", "Central do Maranh√£o", 
    "Centro do Guilherme", "Centro Novo do Maranh√£o", "Chapadinha", "Cidel√¢ndia", "Cod√≥", 
    "Coelho Neto", "Colinas", "Concei√ß√£o do Lago-A√ßu", "Coroat√°", "Cururupu", "Davin√≥polis", 
    "Dom Pedro", "Duque Bacelar", "Esperantin√≥polis", "Estreito", "Feira Nova do Maranh√£o", 
    "Fernando Falc√£o", "Formosa da Serra Negra", "Fortaleza dos Nogueiras", "Fortuna", 
    "Godofredo Viana", "Gon√ßalves Dias", "Governador Archer", "Governador Edison Lob√£o", 
    "Governador Eug√™nio Barros", "Governador Luiz Rocha", "Governador Newton Bello", 
    "Governador Nunes Freire", "Gra√ßa Aranha", "Graja√∫", "Guimar√£es", "Humberto de Campos", 
    "Icatu", "Igarap√© do Meio", "Igarap√© Grande", "Imperatriz", "Itaipava do Graja√∫", 
    "Itapecuru Mirim", "Itinga do Maranh√£o", "Jatob√°", "Jenipapo dos Vieiras", "Jo√£o Lisboa", 
    "Josel√¢ndia", "Junco do Maranh√£o", "Lago da Pedra", "Lago do Junco", "Lago dos Rodrigues", 
    "Lago Verde", "Lagoa do Mato", "Lagoa Grande do Maranh√£o", "Lajeado Novo", "Lima Campos", 
    "Loreto", "Lu√≠s Domingues", "Magalh√£es de Almeida", "Maraca√ßum√©", "Maraj√° do Sena", 
    "Maranh√£ozinho", "Mata Roma", "Matinha", "Mat√µes", "Mat√µes do Norte", "Milagres do Maranh√£o", 
    "Mirador", "Miranda do Norte", "Mirinzal", "Mon√ß√£o", "Montes Altos", "Morros", "Nina Rodrigues", 
    "Nova Colinas", "Nova Iorque", "Nova Olinda do Maranh√£o", "Olho d'√Ågua das Cunh√£s", 
    "Olinda Nova do Maranh√£o", "Pa√ßo do Lumiar", "Palmeir√¢ndia", "Paraibano", "Parnarama", 
    "Passagem Franca", "Pastos Bons", "Paulino Neves", "Paulo Ramos", "Pedreiras", 
    "Pedro do Ros√°rio", "Penalva", "Peri Mirim", "Peritor√≥", "Pindar√©-Mirim", "Pinheiro", 
    "Pio XII", "Pirapemas", "Po√ß√£o de Pedras", "Porto Franco", "Porto Rico do Maranh√£o", 
    "Presidente Dutra", "Presidente Juscelino", "Presidente M√©dici", "Presidente Sarney", 
    "Presidente Vargas", "Primeira Cruz", "Raposa", "Riach√£o", "Ribamar Fiquene", "Ros√°rio", 
    "Samba√≠ba", "Santa Filomena do Maranh√£o", "Santa Helena", "Santa In√™s", "Santa Luzia", 
    "Santa Luzia do Paru√°", "Santa Quit√©ria do Maranh√£o", "Santa Rita", "Santana do Maranh√£o", 
    "Santo Amaro do Maranh√£o", "Santo Ant√¥nio dos Lopes", "S√£o Benedito do Rio Preto", 
    "S√£o Bento", "S√£o Bernardo", "S√£o Domingos do Azeit√£o", "S√£o Domingos do Maranh√£o", 
    "S√£o F√©lix de Balsas", "S√£o Francisco do Brej√£o", "S√£o Francisco do Maranh√£o", 
    "S√£o Jo√£o Batista", "S√£o Jo√£o do Car√∫", "S√£o Jo√£o do Para√≠so", "S√£o Jo√£o do Soter", 
    "S√£o Jo√£o dos Patos", "S√£o Jos√© de Ribamar", "S√£o Jos√© dos Bas√≠lios", "S√£o Lu√≠s", 
    "S√£o Lu√≠s Gonzaga do Maranh√£o", "S√£o Mateus do Maranh√£o", "S√£o Pedro da √Ågua Branca", 
    "S√£o Pedro dos Crentes", "S√£o Raimundo das Mangabeiras", "S√£o Raimundo do Doca Bezerra", 
    "S√£o Roberto", "S√£o Vicente Ferrer", "Satubinha", "Senador Alexandre Costa", 
    "Senador La Rocque", "Serrano do Maranh√£o", "S√≠tio Novo", "Sucupira do Norte", 
    "Sucupira do Riach√£o", "Tasso Fragoso", "Timbiras", "Timon", "Trizidela do Vale", 
    "Tufil√¢ndia", "Tuntum", "Turia√ßu", "Turil√¢ndia", "Tut√≥ia", "Urbano Santos", 
    "Vargem Grande", "Viana", "Vila Nova dos Mart√≠rios", "Vit√≥ria do Mearim", "Vitorino Freire", "Z√© Doca"
]

# --- FUN√á√ïES AUXILIARES ---
@st.cache_data
def carregar_criterios_do_arquivo(caminho_arquivo="criterios_por_topico.json"):
    try:
        with open(caminho_arquivo, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"ERRO: O arquivo de dados '{caminho_arquivo}' n√£o foi encontrado.")
        return None
    except json.JSONDecodeError:
        st.error(f"ERRO: O arquivo '{caminho_arquivo}' cont√©m um erro de formata√ß√£o.")
        return None

def criar_pastas_necessarias():
    os.makedirs("data/avaliacoes", exist_ok=True)
    os.makedirs("relatorios", exist_ok=True)

def calcular_indice_e_selo(respostas, matriz_perguntas):
    pesos = {"ESSENCIAL": 2.0, "OBRIGAT√ìRIA": 1.5, "RECOMENDADA": 1.0}
    total_pontos_possiveis, pontos_obtidos, total_essenciais, essenciais_atendidos = 0, 0, 0, 0
    for secao, perguntas in matriz_perguntas.items():
        if secao == "Municipios_MA": continue
        for item in perguntas:
            classificacao = item.get("classificacao", "RECOMENDADA").upper()
            peso = pesos.get(classificacao, 1.0)
            total_pontos_possiveis += peso
            status_geral_atende = not any(respostas.get(f"{secao}_{item['criterio']}_{sub}") == "N√£o Atende" for sub in item["subcriterios"])
            if status_geral_atende: pontos_obtidos += peso
            if classificacao == "ESSENCIAL":
                total_essenciais += 1
                if status_geral_atende: essenciais_atendidos += 1
    percentual_essenciais = (essenciais_atendidos / total_essenciais * 100) if total_essenciais > 0 else 100
    indice = (pontos_obtidos / total_pontos_possiveis * 100) if total_pontos_possiveis > 0 else 0
    selo = "Inexistente"
    if indice > 0:
        if percentual_essenciais == 100:
            if indice >= 95: selo = "üíé Diamante"
            elif indice >= 85: selo = "ü•á Ouro"
            elif indice >= 75: selo = "ü•à Prata"
            else: selo = "Elevado (n√£o eleg√≠vel para selo)"
        else:
            if indice >= 75: selo = "Elevado"
            elif indice >= 50: selo = "Intermedi√°rio"
            elif indice >= 30: selo = "B√°sico"
            else: selo = "Inicial"
    return {"indice": indice, "selo": selo, "percentual_essenciais": percentual_essenciais}

def calcular_pontuacao_secao(respostas, perguntas_secao, nome_secao):
    pesos = {"ESSENCIAL": 2.0, "OBRIGAT√ìRIA": 1.5, "RECOMENDADA": 1.0}
    total_pontos_possiveis, pontos_obtidos = 0, 0
    for item in perguntas_secao:
        classificacao = item.get("classificacao", "RECOMENDADA").upper()
        peso = pesos.get(classificacao, 1.0)
        total_pontos_possiveis += peso
        if not any(respostas.get(f"{nome_secao}_{item['criterio']}_{sub}") == "N√£o Atende" for sub in item["subcriterios"]):
            pontos_obtidos += peso
    return (pontos_obtidos / total_pontos_possiveis * 100) if total_pontos_possiveis > 0 else 100

def on_disponibilidade_change(secao, criterio, subcriterios):
    chave_disponibilidade = f"{secao}_{criterio}_Disponibilidade"
    novo_status_disponibilidade = st.session_state[chave_disponibilidade]
    st.session_state.respostas[chave_disponibilidade] = novo_status_disponibilidade
    novo_status_subs = "Atende" if novo_status_disponibilidade == "Atende" else "N√£o Atende"
    for sub in subcriterios:
        if sub != "Disponibilidade": st.session_state.respostas[f"{secao}_{criterio}_{sub}"] = novo_status_subs

def gerar_relatorio_novo_modelo(respostas, municipio, segmento, matriz_perguntas, tipo_relatorio, nome_usuario, usuario_config):
    template_tipo = usuario_config.get('template', 'padrao')
    template_path = f"modelo_{template_tipo}.docx"
    try:
        doc = docx.Document(template_path)
    except Exception:
        st.sidebar.error(f"ERRO: Arquivo de modelo '{template_path}' n√£o foi encontrado."); return None
    
    p_title = doc.add_paragraph()
    p_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run_title = p_title.add_run("PADR√ÉO MINIMO DE QUALIDADE")
    run_title.font.size = Pt(22); run_title.bold = True
    p_subtitulo = doc.add_paragraph(); p_subtitulo.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p_subtitulo.add_run("Relat√≥rio de Transpar√™ncia\n").bold = True
    p_subtitulo.add_run(f"{segmento} de {municipio}").bold = True
    resultados = calcular_indice_e_selo(respostas, matriz_perguntas)
    doc.add_paragraph()
    p_score = doc.add_paragraph(f"{resultados['indice']:.2f}%"); p_score.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p_score.runs[0].font.size = Pt(48); p_score.runs[0].bold = True
    p_selo = doc.add_paragraph(f"{resultados['selo']}"); p_selo.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p_selo.runs[0].font.size = Pt(24); p_selo.runs[0].bold = True
    doc.add_paragraph()
    texto_intro = f"Com base na Lei 12.527/2011 (Lei de Acesso √† Informa√ß√£o), o nosso controle de qualidade fez uma avalia√ß√£o geral da {segmento} de {municipio}, na qual, apresentou as seguintes informa√ß√µes:"
    doc.add_paragraph(texto_intro); doc.add_paragraph()
    doc.add_paragraph(f"Exerc√≠cio: {datetime.now().year}")
    doc.add_paragraph(f"Avalia√ß√£o feita por: {nome_usuario}")
    doc.add_paragraph(f"Data de Gera√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    doc.add_page_break()
    p_detalhe = doc.add_paragraph()
    run_detalhe = p_detalhe.add_run("Detalhamento da Avalia√ß√£o")
    run_detalhe.font.size = Pt(18); run_detalhe.bold = True
    
    matriz_a_usar = matriz_perguntas
    if tipo_relatorio == "Apenas N√£o Conformidades":
        perguntas_filtradas = {}
        for secao, perguntas in matriz_perguntas.items():
            if secao == "Municipios_MA": continue
            itens_nao_conformes = [item for item in perguntas if any(respostas.get(f"{secao}_{item['criterio']}_{sub}") == "N√£o Atende" for sub in item["subcriterios"])]
            if itens_nao_conformes: perguntas_filtradas[secao] = itens_nao_conformes
        matriz_a_usar = perguntas_filtradas
    if not matriz_a_usar:
        doc.add_paragraph("Nenhuma n√£o conformidade foi encontrada.")
    else:
        for secao, perguntas in matriz_a_usar.items():
            if secao == "Municipios_MA": continue
            score_secao = calcular_pontuacao_secao(respostas, perguntas, secao)
            p_secao_titulo = doc.add_paragraph()
            run_secao_titulo = p_secao_titulo.add_run(f"{secao.upper()} - {score_secao:.2f}%")
            run_secao_titulo.font.size = Pt(14); run_secao_titulo.bold = True

            for item in perguntas:
                p_item = doc.add_paragraph()
                p_item.add_run(f"{item['topico']} - {item['criterio']} ({item.get('classificacao', '').upper()})").bold = True
                observacoes_finais = []
                chave_disponibilidade_item = f"{secao}_{item['criterio']}_Disponibilidade"
                disponibilidade_falhou_item = ("Disponibilidade" in item["subcriterios"] and respostas.get(chave_disponibilidade_item) == "N√£o Atende")
                if disponibilidade_falhou_item:
                    p_item.add_run(f"\n‚Ä¢ Disponibilidade: ").italic = True
                    run_status = p_item.add_run("N√£o Atende"); run_status.bold = True; run_status.font.color.rgb = RGBColor(0xFF, 0, 0)
                    obs = respostas.get(f"{chave_disponibilidade_item}_obs", "")
                    if obs: observacoes_finais.append(("Disponibilidade", obs))
                else:
                    for subcriterio in item["subcriterios"]:
                        chave_resposta = f"{secao}_{item['criterio']}_{subcriterio}"
                        resposta_sub = respostas.get(chave_resposta, "Atende")
                        p_item.add_run(f"\n‚Ä¢ {subcriterio}: ").italic = True
                        if resposta_sub == "Atende":
                            run_status = p_item.add_run("Atende"); run_status.font.color.rgb = RGBColor(0x00, 0x80, 0x00)
                        else:
                            run_status = p_item.add_run("N√£o Atende"); run_status.font.color.rgb = RGBColor(0xFF, 0, 0)
                            obs = respostas.get(f"{chave_resposta}_obs", "")
                            if obs: observacoes_finais.append((subcriterio, obs))
                        run_status.bold = True
                chave_links_pergunta = f"{secao}_{item['criterio']}_links"
                links_finais = respostas.get(chave_links_pergunta, [])
                if links_finais or observacoes_finais:
                    p_obs = doc.add_paragraph(); p_obs.add_run("Evid√™ncias e Coment√°rios:").bold = True
                    for link in list(set(links_finais)):
                        p_obs.add_run(f"\n- Link: {link}")
                    for sub, obs_text in observacoes_finais:
                        p_obs.add_run(f"\n- Observa√ß√£o ({sub}): {obs_text}")
            doc.add_paragraph()

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    nome_base = f"Relatorio_Final_{segmento.replace(' ', '')}_{municipio.replace(' ', '')}_{timestamp}"
    path_docx = os.path.join("relatorios", f"{nome_base}.docx"); path_pdf = os.path.join("relatorios", f"{nome_base}.pdf")
    doc.save(path_docx)
    try:
        convert(path_docx, path_pdf); os.remove(path_docx)
        return path_pdf
    except Exception as e:
        st.sidebar.error(f"Falha ao converter para PDF: {e}"); st.session_state.fallback_docx_path = path_docx
        return None

# --- INTERFACE GR√ÅFICA ---
st.set_page_config(layout="wide", page_title="Avaliador de Transpar√™ncia")
st.title("üìÑ Sistema de Avalia√ß√£o de Transpar√™ncia Municipal")
matriz_completa = carregar_criterios_do_arquivo()

if matriz_completa:
    try:
        with open('config.yaml', 'r', encoding='utf-8') as file: config = yaml.load(file, Loader=SafeLoader)
        authenticator = stauth.Authenticate(config['credentials'], config['cookie']['name'], config['cookie']['key'], config['cookie']['expiry_days'])
        authenticator.login('main')
    except FileNotFoundError:
        st.error("ERRO: O arquivo 'config.yaml' n√£o foi encontrado."); st.stop()
    if st.session_state["authentication_status"]:
        authenticator.logout('Logout', 'sidebar', key='logout_button')
        st.sidebar.title(f"Bem-vindo(a),\n{st.session_state['name']}!")
        criar_pastas_necessarias()
        st.sidebar.header("Configura√ß√£o da Avalia√ß√£o")
        
        opcoes_municipios = ["- Selecione um munic√≠pio -"] + sorted(matriz_completa.get("Municipios_MA", MUNICIPIOS_MARANHAO))
        municipio = st.sidebar.selectbox("Nome do Munic√≠pio", options=opcoes_municipios)
        
        opcoes_segmento = [key for key in matriz_completa.keys() if key != "Municipios_MA"]
        segmento = st.sidebar.selectbox("√ìrg√£o/Poder", opcoes_segmento)
        
        if municipio != "- Selecione um munic√≠pio -" and segmento:
            nome_arquivo_avaliacao = f"avaliacao_{segmento.replace(' ', '')}_{municipio.replace(' ', '')}_{st.session_state['username']}.json"
            caminho_arquivo = os.path.join("data/avaliacoes", nome_arquivo_avaliacao)
            if st.sidebar.button("‚úÖ Iniciar / Continuar Avalia√ß√£o"):
                if os.path.exists(caminho_arquivo):
                    with open(caminho_arquivo, 'r', encoding='utf-8') as f: st.session_state.respostas = json.load(f)
                    st.sidebar.success("Avalia√ß√£o anterior carregada!")
                else:
                    st.session_state.respostas = {}; st.sidebar.info("Iniciando uma nova avalia√ß√£o.")
                st.session_state.path_pdf = None; st.session_state.fallback_docx_path = None
                st.session_state.avaliacao_iniciada = True; st.session_state.caminho_arquivo = caminho_arquivo
                st.session_state.municipio = municipio; st.session_state.segmento = segmento
                st.session_state.last_save_time = datetime.now()
                
        if st.session_state.get('avaliacao_iniciada', False):
            if 'last_save_time' not in st.session_state: st.session_state.last_save_time = datetime.now()
            if datetime.now() - st.session_state.last_save_time > timedelta(minutes=10):
                try:
                    with open(st.session_state.caminho_arquivo, 'w', encoding='utf-8') as f: json.dump(st.session_state.respostas, f, ensure_ascii=False, indent=4)
                    st.session_state.last_save_time = datetime.now()
                    st.toast(f"Progresso salvo automaticamente √†s {datetime.now().strftime('%H:%M:%S')}")
                except Exception as e: st.toast(f"Erro no salvamento autom√°tico: {e}")
            st.header(f"Avalia√ß√£o: {st.session_state.municipio} - {st.session_state.segmento}")
            matriz_perguntas = matriz_completa[st.session_state.segmento]
            for secao, perguntas in matriz_perguntas.items():
                with st.expander(f"**{secao}**", expanded=False):
                    for item in perguntas:
                        st.markdown(f"#### {item['topico']} - {item['criterio']}"); st.markdown("---")
                        col_link_ui, _ = st.columns([1, 1])
                        with col_link_ui:
                            st.subheader("Links de Evid√™ncia")
                            chave_links = f"{secao}_{item['criterio']}_links"
                            if chave_links not in st.session_state.respostas: st.session_state.respostas[chave_links] = []
                            for i, link in enumerate(st.session_state.respostas[chave_links]):
                                link_cols = st.columns([10, 1]); link_cols[0].info(link)
                                if link_cols[1].button("X", key=f"rem_{chave_links}_{i}"): st.session_state.respostas[chave_links].pop(i); st.rerun()
                            link_cols = st.columns([10, 1])
                            novo_link = link_cols[0].text_input("Adicionar novo link", key=f"add_{chave_links}", label_visibility="collapsed")
                            if link_cols[1].button("‚ûï", key=f"btn_{chave_links}"):
                                if novo_link: st.session_state.respostas[chave_links].append(novo_link); st.rerun()
                        st.markdown("---"); st.subheader("Crit√©rios de Avalia√ß√£o")
                        subcriterios = item["subcriterios"]
                        if "Disponibilidade" in subcriterios:
                            cols = st.columns([1, 2]); subcriterio = "Disponibilidade"; chave_resposta = f"{secao}_{item['criterio']}_{subcriterio}"
                            with cols[0]:
                                resposta_atual = st.session_state.respostas.get(chave_resposta, "Atende")
                                st.radio(subcriterio, ("Atende", "N√£o Atende"), index=1 if resposta_atual == "N√£o Atende" else 0, key=chave_resposta, horizontal=True, on_change=on_disponibilidade_change, kwargs=dict(secao=secao, criterio=item['criterio'], subcriterios=subcriterios))
                            if st.session_state.respostas.get(chave_resposta) == "N√£o Atende":
                                with cols[1]:
                                    chave_obs = f"{chave_resposta}_obs"; obs = st.text_area("Observa√ß√£o:", value=st.session_state.respostas.get(chave_obs, "")); st.session_state.respostas[chave_obs] = obs
                        chave_disponibilidade = f"{secao}_{item['criterio']}_Disponibilidade"
                        disponibilidade_falhou = ("Disponibilidade" in subcriterios and st.session_state.respostas.get(chave_disponibilidade) == "N√£o Atende")
                        if not disponibilidade_falhou:
                            for subcriterio in subcriterios:
                                if subcriterio != "Disponibilidade":
                                    cols = st.columns([1, 2]); chave_resposta = f"{secao}_{item['criterio']}_{subcriterio}"
                                    with cols[0]:
                                        resposta_atual = st.session_state.respostas.get(chave_resposta, "Atende"); resposta = st.radio(subcriterio, ("Atende", "N√£o Atende"), index=1 if resposta_atual == "N√£o Atende" else 0, key=chave_resposta, horizontal=True); st.session_state.respostas[chave_resposta] = resposta
                                    if resposta == "N√£o Atende":
                                        with cols[1]:
                                            chave_obs = f"{chave_resposta}_obs"; obs = st.text_area("Observa√ß√£o:", value=st.session_state.respostas.get(chave_obs, "")); st.session_state.respostas[chave_obs] = obs
                        st.markdown("---")
            st.sidebar.header("A√ß√µes")
            if st.sidebar.button("üíæ Salvar Progresso"):
                with open(st.session_state.caminho_arquivo, 'w', encoding='utf-8') as f: json.dump(st.session_state.respostas, f, ensure_ascii=False, indent=4)
                st.session_state.last_save_time = datetime.now(); st.sidebar.success("Progresso salvo!")
            st.sidebar.markdown("##### Tipo de Relat√≥rio"); tipo_relatorio = st.sidebar.radio("Escolha o tipo:", ("Apenas N√£o Conformidades", "Relat√≥rio Completo"), label_visibility="collapsed")
            if st.sidebar.button("üìä Gerar Relat√≥rio PDF"):
                with st.spinner("Gerando relat√≥rio PDF..."):
                    with open(st.session_state.caminho_arquivo, 'w', encoding='utf-8') as f: json.dump(st.session_state.respostas, f, ensure_ascii=False, indent=4)
                    st.session_state.fallback_docx_path = None
                    path_pdf = gerar_relatorio_novo_modelo(st.session_state.respostas, st.session_state.municipio, st.session_state.segmento, matriz_completa[st.session_state.segmento], tipo_relatorio, st.session_state["name"], config['credentials']['usernames'][st.session_state['username']])
                    st.session_state.path_pdf = path_pdf
                if st.session_state.path_pdf: st.sidebar.success("Relat√≥rio PDF pronto!")
            if st.session_state.get('path_pdf'):
                with open(st.session_state.path_pdf, "rb") as pdf_file: st.sidebar.download_button(label="‚¨áÔ∏è Baixar Relat√≥rio (.pdf)", data=pdf_file, file_name=os.path.basename(st.session_state.path_pdf), mime="application/pdf", key="download_pdf")
            if st.session_state.get('fallback_docx_path'):
                with open(st.session_state.fallback_docx_path, "rb") as docx_file: st.sidebar.download_button(label="‚¨áÔ∏è Baixar Arquivo Word (.docx)", data=docx_file, file_name=os.path.basename(st.session_state.fallback_docx_path), mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document", key="download_docx_fallback")
    elif st.session_state["authentication_status"] is False: st.error('Usu√°rio ou senha incorretos.')
    elif st.session_state["authentication_status"] is None: st.warning('Por favor, insira seu usu√°rio e senha.')
else:
    st.warning("Aguardando o carregamento do arquivo 'criterios_por_topico.json'...")
